plugins {
    id "com.avast.gradle.docker-compose" version "0.9.1"
}

group 'io.gitsocratic'
version '0.2.1'

apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'io.gitsocratic.SocraticCLI'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url 'https://repo.grakn.ai/repository/maven/'
    }
    maven {
        url "https://maven.pkg.github.com/codebrig/arthur"
        credentials {
            username = System.getenv("GITHUB_ACTOR") ?: (System.getenv("gpr.user") ?: System.getProperty("gpr.user"))
            password = System.getenv("GITHUB_TOKEN") ?: (System.getenv("gpr.key" ?: System.getProperty("gpr.key")))
        }
    }
    maven {
        url "https://maven.pkg.github.com/codebrig/phenomena"
        credentials {
            username = System.getenv("GITHUB_ACTOR") ?: (System.getenv("gpr.user") ?: System.getProperty("gpr.user"))
            password = System.getenv("GITHUB_TOKEN") ?: (System.getenv("gpr.key" ?: System.getProperty("gpr.key")))
        }
    }
}

ext {
    graknVersion = "2.0.0-alpha-6"
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'

    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    implementation group: 'info.picocli', name: 'picocli', version: '4.6.1'
    implementation group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1'
    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.10.0.202012080955-r'
    implementation "com.github.rholder:guava-retrying:2.0.0"
    implementation group: 'com.github.docker-java', name: 'docker-java', version: '3.2.7'
    implementation 'com.codebrig:phenomena:0.3.5'
    implementation 'com.codebrig:arthur:0.4.4'
    implementation group: 'io.grakn.client', name: 'grakn-client', version: "$graknVersion"
    compile group: 'io.vertx', name: 'vertx-core', version: '4.0.0'
    implementation files('lib/bblfsh-client-1.11.1.jar')
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-simple'
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'ch.qos.logback', module: 'logback-core'
}

test {
    dependsOn "composeUp"
    finalizedBy "composeDown"

    testLogging {
        events "passed", "skipped", "failed"
        setExceptionFormat("full")

        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

dockerCompose {
    useComposeFiles = ['./docker-compose.yml']
    dockerComposeWorkingDirectory = './docker/'
    captureContainersOutput = true
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/gitsocratic_build.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['build_date'] = new Date().toInstant().toString()
            p['grakn_version'] = "$graknVersion".toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=.;%APP_HOME%/lib/*')
    }
}
